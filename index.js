const fs = require('fs');
const { Client, Collection, Intents, MessageEmbed, MessageActionRow, MessageButton, MessageSelectMenu, Formatters } = require('discord.js');
const client = new Client({ intents: [Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES, Intents.FLAGS.GUILD_MEMBERS] });
const discordModals = require('discord-modals');
discordModals(client);
require('dotenv').config();

// „É¢„Ç∏„É•„Éº„É´„ÇíÂèñÂæó
const interaction_button = require('./interaction/button');
const interaction_selectmenu = require('./interaction/selectmenu');
const interaction_modal = require('./interaction/modal');

// „Ç≥„Éû„É≥„Éâ„Éï„Ç°„Ç§„É´„ÇíÂãïÁöÑ„Å´ÂèñÂæó„Åô„Çã
client.commands = new Collection();
const commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));
for (const file of commandFiles) {
	const command = require(`./commands/${file}`);
	client.commands.set(command.data.name, command);
}

// „Ç®„É©„ÉºÁî®Âüã„ÇÅËæº„Åø
const error_embed = new MessageEmbed()
	.setTitle('üõë „Åä„Å£„Å®...')
	.setDescription('Âá¶ÁêÜ„ÅÆÂÆüË°å‰∏≠„Å´ÂïèÈ°å„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ\n‰ΩïÂ∫¶„ÇÇÂêå„Åò„Ç®„É©„Éº„ÅåÁô∫Áîü„Åô„ÇãÂ†¥Âêà„ÄÅ‰ª•‰∏ã„ÅÆ„Éú„Çø„É≥„Åã„Çâ„Ç®„É©„Éº„Ç≥„Éº„Éâ„Å®ÂÖ±„Å´Â†±Âëä„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
	.setColor('RED')
const error_button = new MessageActionRow().addComponents(
	new MessageButton()
	.setLabel('ÂïèÈ°å„ÇíÂ†±Âëä')
	.setStyle('LINK')
	.setURL('https://github.com/nonick-mc/DiscordBot-NoNick.js/issues/new')
)

//Repl.it„Åß„Éõ„Çπ„ÉÜ„Ç£„É≥„Ç∞„Çí„Åô„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åì„ÅÆ„Ç≥„Éº„Éâ„ÇíÊúâÂäπÂåñ„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã
/*
"use strict";
const http = require('http');
http.createServer(function(req, res) {
	res.write("ready nouniku!!");
	res.end();
}).listen(8080);
*/

// ready nouniku!!(ÂÆöÊúü)
client.once('ready', () => {
	console.log(`[DiscordBot-NoNick.js]`+'\u001b[32m'+' DiscordBot„ÅåËµ∑Âãï„Åó„Åæ„Åó„Åü„ÄÇ'+'\u001b[0m');
});

// „É°„É≥„Éê„Éº„ÅåÂÖ•„Å£„Å¶„Åç„ÅüÊôÇ
client.on('guildMemberAdd', member => {
	const { welcomeCh, welcomeMessage, welcome } = JSON.parse(fs.readFileSync('./config.json', 'utf-8'));
	if (welcome) {
		const embed = new MessageEmbed()
			.setTitle('WELCOME - „Çà„ÅÜ„Åì„Åù!')
			.setDescription(`**<@${member.id}>**„Åï„Çì\n**${member.guild.name}** „Å∏„Çà„ÅÜ„Åì„Åù!\n${welcomeMessage}\n\nÁèæÂú®„ÅÆ„É°„É≥„Éê„ÉºÊï∞:**${member.guild.memberCount}**‰∫∫`)
			.setThumbnail(member.user.avatarURL())
			.setColor('#57f287');
		client.channels.cache.get(welcomeCh).send({embeds: [embed]}).catch(error => {
			console.log(`[DiscordBot-NoNick.js]`+'\u001b[31m'+' [ERROR]'+'\u001b[0m'+' ÊåáÂÆö„Åó„Åü„ÉÅ„É£„É≥„Éç„É´„Å´ÂÖ•ÈÄÄÂÆ§„É≠„Ç∞„ÇíÈÄÅ„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ„Äå/setting„Äç„ÅßÊ≠£„Åó„ÅÑ„ÉªBOT„ÅåÈÄÅ‰ø°„Åß„Åç„Çã„ÉÅ„É£„É≥„Éç„É´ID„ÇíÈÄÅ‰ø°„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
		})
	}
});

// „É°„É≥„Éê„Éº„ÅåÊäú„Åë„ÅüÊôÇ
client.on('guildMemberRemove', member => {
	const { welcomeCh, welcome } = JSON.parse(fs.readFileSync('./config.json', 'utf-8'));
	if (welcome) {
		client.channels.cache.get(welcomeCh).send(`**${member.user.username}** „Åï„Çì„Åå„Çµ„Éº„Éê„Éº„ÇíÈÄÄÂá∫„Åó„Åæ„Åó„Åüüëã`).catch(error => {
			console.log(`[DiscordBot-NoNick.js]`+'\u001b[31m'+' [ERROR]'+'\u001b[0m'+' ÊåáÂÆö„Åó„Åü„ÉÅ„É£„É≥„Éç„É´„Å´ÂÖ•ÈÄÄÂÆ§„É≠„Ç∞„ÇíÈÄÅ„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ„Äå/setting„Äç„ÅßÊ≠£„Åó„ÅÑ„ÉªBOT„ÅåÈÄÅ‰ø°„Åß„Åç„Çã„ÉÅ„É£„É≥„Éç„É´ID„ÇíÈÄÅ‰ø°„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
		})
	}
});

// „Ç≥„Éû„É≥„ÉâÂá¶ÁêÜ
client.on('interactionCreate', async interaction => {
	// „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ
	if (interaction.isCommand()) {
		const command = client.commands.get(interaction.commandName);
		if (!command) return;
		await command.execute(interaction,client).catch(error => {
			error_embed.addFields({name: "„Ç®„É©„Éº", value: `${Formatters.codeBlock(error)}`});
			interaction.reply({embeds: [error_embed], components: [error_button], ephemeral:true});
		});
	}
	// „Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„É°„Éã„É•„Éº(„É°„ÉÉ„Çª„Éº„Ç∏)
	if (interaction.isMessageContextMenu()) {
		const command = client.commands.get(interaction.commandName);
		if (!command) return;
		await command.execute(interaction,client).catch(error => {
			error_embed.addFields({name: "„Ç®„É©„Éº", value: `${Formatters.codeBlock(error)}`});
			interaction.reply({embeds: [error_embed], components: [error_button], ephemeral:true});
		});
	}
	// „Éú„Çø„É≥
	if (interaction.isButton()) {
		await interaction_button.execute(interaction,client).catch(error => {
			error_embed.addFields({name: "„Ç®„É©„Éº", value: `${Formatters.codeBlock(error)}`});
			interaction.reply({embeds: [error_embed], components: [error_button], ephemeral:true});
		});
	}
	// „Çª„É¨„ÇØ„Éà„É°„Éã„É•„Éº
	if (interaction.isSelectMenu()) {
		await interaction_selectmenu.execute(interaction,client).catch(error => {
			error_embed.addFields({name: "„Ç®„É©„Éº", value: `${Formatters.codeBlock(error)}`});
			interaction.reply({embeds: [error_embed], components: [error_button], ephemeral:true});
		});
	}
});

	// modal„ÇíÂèó„ÅëÂèñ„Å£„ÅüÊôÇ„ÅÆÂá¶ÁêÜ
client.on('modalSubmit', async (modal) => {
	await interaction_modal.execute(modal,client).catch(error => {
		error_embed.addFields({name: "„Ç®„É©„Éº", value: `${Formatters.codeBlock(error)}`});
		modal.reply({embeds: [error_embed], components: [error_button], ephemeral:true});
	});
})

client.login(process.env.BOT_TOKEN);
